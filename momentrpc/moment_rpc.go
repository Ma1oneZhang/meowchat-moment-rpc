// Code generated by goctl. DO NOT EDIT.
// Source: moment.proto

package momentrpc

import (
	"context"

	"github.com/xh-polaris/meowchat-moment-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateMomentReq                   = pb.CreateMomentReq
	CreateMomentResp                  = pb.CreateMomentResp
	DeleteMomentReq                   = pb.DeleteMomentReq
	DeleteMomentResp                  = pb.DeleteMomentResp
	ListMomentByCommunityIdReq        = pb.ListMomentByCommunityIdReq
	ListMomentByMultiCommunityIdReq   = pb.ListMomentByMultiCommunityIdReq
	ListMomentByUserIdReq             = pb.ListMomentByUserIdReq
	ListMomentResp                    = pb.ListMomentResp
	Moment                            = pb.Moment
	RetrieveMomentReq                 = pb.RetrieveMomentReq
	RetrieveMomentResp                = pb.RetrieveMomentResp
	SearchMomentByCommunityIdReq      = pb.SearchMomentByCommunityIdReq
	SearchMomentByMultiCommunityIdReq = pb.SearchMomentByMultiCommunityIdReq
	UpdateMomentReq                   = pb.UpdateMomentReq
	UpdateMomentResp                  = pb.UpdateMomentResp

	MomentRpc interface {
		SearchMomentByCommunityId(ctx context.Context, in *SearchMomentByCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error)
		SearchMomentByMultiCommunityId(ctx context.Context, in *SearchMomentByMultiCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error)
		ListMomentByCommunityId(ctx context.Context, in *ListMomentByCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error)
		ListMomentByMultiCommunityId(ctx context.Context, in *ListMomentByMultiCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error)
		ListMomentByUserId(ctx context.Context, in *ListMomentByUserIdReq, opts ...grpc.CallOption) (*ListMomentResp, error)
		RetrieveMoment(ctx context.Context, in *RetrieveMomentReq, opts ...grpc.CallOption) (*RetrieveMomentResp, error)
		CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentResp, error)
		UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error)
		DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error)
	}

	defaultMomentRpc struct {
		cli zrpc.Client
	}
)

func NewMomentRpc(cli zrpc.Client) MomentRpc {
	return &defaultMomentRpc{
		cli: cli,
	}
}

func (m *defaultMomentRpc) SearchMomentByCommunityId(ctx context.Context, in *SearchMomentByCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.SearchMomentByCommunityId(ctx, in, opts...)
}

func (m *defaultMomentRpc) SearchMomentByMultiCommunityId(ctx context.Context, in *SearchMomentByMultiCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.SearchMomentByMultiCommunityId(ctx, in, opts...)
}

func (m *defaultMomentRpc) ListMomentByCommunityId(ctx context.Context, in *ListMomentByCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.ListMomentByCommunityId(ctx, in, opts...)
}

func (m *defaultMomentRpc) ListMomentByMultiCommunityId(ctx context.Context, in *ListMomentByMultiCommunityIdReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.ListMomentByMultiCommunityId(ctx, in, opts...)
}

func (m *defaultMomentRpc) ListMomentByUserId(ctx context.Context, in *ListMomentByUserIdReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.ListMomentByUserId(ctx, in, opts...)
}

func (m *defaultMomentRpc) RetrieveMoment(ctx context.Context, in *RetrieveMomentReq, opts ...grpc.CallOption) (*RetrieveMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.RetrieveMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.CreateMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.UpdateMoment(ctx, in, opts...)
}

func (m *defaultMomentRpc) DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error) {
	client := pb.NewMomentRpcClient(m.cli.Conn())
	return client.DeleteMoment(ctx, in, opts...)
}
