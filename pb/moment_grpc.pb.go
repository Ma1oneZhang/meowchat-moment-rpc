// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: moment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentClient is the client API for Moment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentClient interface {
	GetManyMoment(ctx context.Context, in *GetManyMomentReq, opts ...grpc.CallOption) (*GetManyMomentResp, error)
	GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentResp, error)
	AddMoment(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*AddMomentResp, error)
	UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error)
	DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error)
}

type momentClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentClient(cc grpc.ClientConnInterface) MomentClient {
	return &momentClient{cc}
}

func (c *momentClient) GetManyMoment(ctx context.Context, in *GetManyMomentReq, opts ...grpc.CallOption) (*GetManyMomentResp, error) {
	out := new(GetManyMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment/GetManyMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) GetMoment(ctx context.Context, in *GetMomentReq, opts ...grpc.CallOption) (*GetMomentResp, error) {
	out := new(GetMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment/GetMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) AddMoment(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*AddMomentResp, error) {
	out := new(AddMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment/AddMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error) {
	out := new(UpdateMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment/UpdateMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error) {
	out := new(DeleteMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment/DeleteMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentServer is the server API for Moment service.
// All implementations must embed UnimplementedMomentServer
// for forward compatibility
type MomentServer interface {
	GetManyMoment(context.Context, *GetManyMomentReq) (*GetManyMomentResp, error)
	GetMoment(context.Context, *GetMomentReq) (*GetMomentResp, error)
	AddMoment(context.Context, *AddMomentReq) (*AddMomentResp, error)
	UpdateMoment(context.Context, *UpdateMomentReq) (*UpdateMomentResp, error)
	DeleteMoment(context.Context, *DeleteMomentReq) (*DeleteMomentResp, error)
	mustEmbedUnimplementedMomentServer()
}

// UnimplementedMomentServer must be embedded to have forward compatible implementations.
type UnimplementedMomentServer struct {
}

func (UnimplementedMomentServer) GetManyMoment(context.Context, *GetManyMomentReq) (*GetManyMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyMoment not implemented")
}
func (UnimplementedMomentServer) GetMoment(context.Context, *GetMomentReq) (*GetMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoment not implemented")
}
func (UnimplementedMomentServer) AddMoment(context.Context, *AddMomentReq) (*AddMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMoment not implemented")
}
func (UnimplementedMomentServer) UpdateMoment(context.Context, *UpdateMomentReq) (*UpdateMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoment not implemented")
}
func (UnimplementedMomentServer) DeleteMoment(context.Context, *DeleteMomentReq) (*DeleteMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoment not implemented")
}
func (UnimplementedMomentServer) mustEmbedUnimplementedMomentServer() {}

// UnsafeMomentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentServer will
// result in compilation errors.
type UnsafeMomentServer interface {
	mustEmbedUnimplementedMomentServer()
}

func RegisterMomentServer(s grpc.ServiceRegistrar, srv MomentServer) {
	s.RegisterService(&Moment_ServiceDesc, srv)
}

func _Moment_GetManyMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).GetManyMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment/GetManyMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).GetManyMoment(ctx, req.(*GetManyMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_GetMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).GetMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment/GetMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).GetMoment(ctx, req.(*GetMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_AddMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).AddMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment/AddMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).AddMoment(ctx, req.(*AddMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_UpdateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).UpdateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment/UpdateMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).UpdateMoment(ctx, req.(*UpdateMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_DeleteMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).DeleteMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment/DeleteMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).DeleteMoment(ctx, req.(*DeleteMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Moment_ServiceDesc is the grpc.ServiceDesc for Moment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Moment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment.moment",
	HandlerType: (*MomentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManyMoment",
			Handler:    _Moment_GetManyMoment_Handler,
		},
		{
			MethodName: "GetMoment",
			Handler:    _Moment_GetMoment_Handler,
		},
		{
			MethodName: "AddMoment",
			Handler:    _Moment_AddMoment_Handler,
		},
		{
			MethodName: "UpdateMoment",
			Handler:    _Moment_UpdateMoment_Handler,
		},
		{
			MethodName: "DeleteMoment",
			Handler:    _Moment_DeleteMoment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment.proto",
}
