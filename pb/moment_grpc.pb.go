// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: moment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentRpcClient is the client API for MomentRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentRpcClient interface {
	ListMoment(ctx context.Context, in *ListMomentReq, opts ...grpc.CallOption) (*ListMomentResp, error)
	RetrieveMoment(ctx context.Context, in *RetrieveMomentReq, opts ...grpc.CallOption) (*RetrieveMomentResp, error)
	CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentResp, error)
	UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error)
	DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error)
}

type momentRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentRpcClient(cc grpc.ClientConnInterface) MomentRpcClient {
	return &momentRpcClient{cc}
}

func (c *momentRpcClient) ListMoment(ctx context.Context, in *ListMomentReq, opts ...grpc.CallOption) (*ListMomentResp, error) {
	out := new(ListMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment_rpc/ListMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentRpcClient) RetrieveMoment(ctx context.Context, in *RetrieveMomentReq, opts ...grpc.CallOption) (*RetrieveMomentResp, error) {
	out := new(RetrieveMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment_rpc/RetrieveMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentRpcClient) CreateMoment(ctx context.Context, in *CreateMomentReq, opts ...grpc.CallOption) (*CreateMomentResp, error) {
	out := new(CreateMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment_rpc/CreateMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentRpcClient) UpdateMoment(ctx context.Context, in *UpdateMomentReq, opts ...grpc.CallOption) (*UpdateMomentResp, error) {
	out := new(UpdateMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment_rpc/UpdateMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentRpcClient) DeleteMoment(ctx context.Context, in *DeleteMomentReq, opts ...grpc.CallOption) (*DeleteMomentResp, error) {
	out := new(DeleteMomentResp)
	err := c.cc.Invoke(ctx, "/moment.moment_rpc/DeleteMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentRpcServer is the server API for MomentRpc service.
// All implementations must embed UnimplementedMomentRpcServer
// for forward compatibility
type MomentRpcServer interface {
	ListMoment(context.Context, *ListMomentReq) (*ListMomentResp, error)
	RetrieveMoment(context.Context, *RetrieveMomentReq) (*RetrieveMomentResp, error)
	CreateMoment(context.Context, *CreateMomentReq) (*CreateMomentResp, error)
	UpdateMoment(context.Context, *UpdateMomentReq) (*UpdateMomentResp, error)
	DeleteMoment(context.Context, *DeleteMomentReq) (*DeleteMomentResp, error)
	mustEmbedUnimplementedMomentRpcServer()
}

// UnimplementedMomentRpcServer must be embedded to have forward compatible implementations.
type UnimplementedMomentRpcServer struct {
}

func (UnimplementedMomentRpcServer) ListMoment(context.Context, *ListMomentReq) (*ListMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoment not implemented")
}
func (UnimplementedMomentRpcServer) RetrieveMoment(context.Context, *RetrieveMomentReq) (*RetrieveMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMoment not implemented")
}
func (UnimplementedMomentRpcServer) CreateMoment(context.Context, *CreateMomentReq) (*CreateMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoment not implemented")
}
func (UnimplementedMomentRpcServer) UpdateMoment(context.Context, *UpdateMomentReq) (*UpdateMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoment not implemented")
}
func (UnimplementedMomentRpcServer) DeleteMoment(context.Context, *DeleteMomentReq) (*DeleteMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoment not implemented")
}
func (UnimplementedMomentRpcServer) mustEmbedUnimplementedMomentRpcServer() {}

// UnsafeMomentRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentRpcServer will
// result in compilation errors.
type UnsafeMomentRpcServer interface {
	mustEmbedUnimplementedMomentRpcServer()
}

func RegisterMomentRpcServer(s grpc.ServiceRegistrar, srv MomentRpcServer) {
	s.RegisterService(&MomentRpc_ServiceDesc, srv)
}

func _MomentRpc_ListMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentRpcServer).ListMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment_rpc/ListMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentRpcServer).ListMoment(ctx, req.(*ListMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentRpc_RetrieveMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentRpcServer).RetrieveMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment_rpc/RetrieveMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentRpcServer).RetrieveMoment(ctx, req.(*RetrieveMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentRpc_CreateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentRpcServer).CreateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment_rpc/CreateMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentRpcServer).CreateMoment(ctx, req.(*CreateMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentRpc_UpdateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentRpcServer).UpdateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment_rpc/UpdateMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentRpcServer).UpdateMoment(ctx, req.(*UpdateMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentRpc_DeleteMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentRpcServer).DeleteMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.moment_rpc/DeleteMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentRpcServer).DeleteMoment(ctx, req.(*DeleteMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MomentRpc_ServiceDesc is the grpc.ServiceDesc for MomentRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MomentRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment.moment_rpc",
	HandlerType: (*MomentRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMoment",
			Handler:    _MomentRpc_ListMoment_Handler,
		},
		{
			MethodName: "RetrieveMoment",
			Handler:    _MomentRpc_RetrieveMoment_Handler,
		},
		{
			MethodName: "CreateMoment",
			Handler:    _MomentRpc_CreateMoment_Handler,
		},
		{
			MethodName: "UpdateMoment",
			Handler:    _MomentRpc_UpdateMoment_Handler,
		},
		{
			MethodName: "DeleteMoment",
			Handler:    _MomentRpc_DeleteMoment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment.proto",
}
